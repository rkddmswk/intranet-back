plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.6'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'bizwiz'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}


dependencies {
    //QueryDsl (1/3)
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.8'
    implementation 'com.zaxxer:HikariCP:3.4.5'
    //Querydsl(2/3)
    implementation "com.querydsl:querydsl-core:5.0.0"
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    runtimeOnly 'com.h2database:h2'
    annotationProcessor(
            "jakarta.persistence:jakarta.persistence-api",
            "jakarta.annotation:jakarta.annotation-api",
            "com.querydsl:querydsl-apt:5.0.0:jakarta")

    implementation 'com.google.code.gson:gson:2.8.6'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

    //jasypt
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

    //JPA에서 nativequery의 결과를 dto로 매핑해주는 라이브러리
    implementation 'ch.simas.qlrm:qlrm:1.7.1'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    //poi
    implementation 'org.apache.poi:poi:5.3.0'
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.3.0'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty "jasypt.encryptor.password", project.getProperties().get("jasypt.encryptor.password")
}

bootRun {
    jvmArgs = ['-Djasypt.encryptor.password=' + System.getenv('JASYPT_KEY')]
}


//Querydsl(3/3)
def querydslDir = "src/main/generated"
